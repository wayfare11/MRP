import pulp

# 数据
products = ['A', 'B', 'C']
months = ['Jan', 'Feb', 'Mar', 'Apr']
demand = {
    'A': [100, 150, 200, 250],
    'B': [200, 250, 300, 350],
    'C': [150, 200, 250, 300]
}
safety_stock = {'A': 50, 'B': 60, 'C': 70}
work_hours = {'A': 2, 'B': 3, 'C': 1}
max_hours_per_month = 1000

# 创建问题
prob = pulp.LpProblem("Production_Planning", pulp.LpMinimize)

# 决策变量
x = pulp.LpVariable.dicts("production", ((i, j) for i in products for j in months), lowBound=0, cat='Integer')
deviation = pulp.LpVariable.dicts("deviation", months, lowBound=0)

# 目标函数: 最小化每个月生产量的绝对偏差和
mean_production = sum(x[(i, j)] for i in products for j in months) / 4
for j in months:
    prob += deviation[j] >= sum(x[(i, j)] for i in products) - mean_production
    prob += deviation[j] >= mean_production - sum(x[(i, j)] for i in products)
prob += pulp.lpSum(deviation[j] for j in months)

# 约束条件
for i in products:
    for k in range(4):
        prob += sum(x[(i, months[j])] for j in range(k+1)) >= sum(demand[i][j] for j in range(k+1)) + safety_stock[i]

for j in months:
    prob += sum(work_hours[i] * x[(i, j)] for i in products) <= max_hours_per_month

# 求解
prob.solve()

# 输出结果
for v in prob.variables():
    if v.varValue > 0:
        print(v.name, "=", v.varValue)

print("Total Cost =", pulp.value(prob.objective))
